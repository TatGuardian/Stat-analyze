# -*- coding: utf-8 -*-
"""

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PEfIUV63jShFZRED_YA0qlsoOSl9DsQT
"""

import pandas as pd
import numpy as np

df = pd.read_csv('https://raw.githubusercontent.com/obulygin/pyda_homeworks/master/statistics_basics/horse_data.csv', names = ['Surgery', 'Age', '3', 'Rectal temperature', 'Pulse', 'Respiratory rate', 'Extremities temperature','8','9','10','Pain','12','13','14','15','16','17','18','19','20','21','22', 'Outcome', '24','25','26','27','28'], na_values='?')
df.head(100)

df = df.drop(df.loc[:, '8':'10'], axis=1)
df = df.drop(df.loc[:, '12':'22'], axis=1)
df = df.drop(df.loc[:, '24':'28'], axis=1)
df = df.drop(df.loc[:, '3':'3'], axis=1)
df.head(25)

"""##Age stats"""

print(df['Age'].describe())

"""Исходя из того, что возможных значений было 2, цифра 9 скорее всего ошибка. учитывая, что 9 встречается 24 раза против 276 раз единицы, заменяю 9 на 2, предполагая техническую ошибку"""

print(df['Age'].value_counts())

df['Age'] = df['Age'].apply(lambda x: 2 if x == 9 else x)
df.head(50)

"""## Rectal temperature stats. normal temp is 37.8 celsius"""

print(df['Rectal temperature'].describe())

"""## Pulse stats"""

print(df['Pulse'].describe())

"""## Respiratory rate"""

print(df['Respiratory rate'].describe())

"""## Extremities temperature"""

print(df['Extremities temperature'].describe())

"""## Pain"""

print(df['Pain'].describe())

"""## Outcome"""

print(df['Outcome'].describe())

"""## Other stats"""

df.isna().sum()

"""## Ковариация"""

df.cov()

df.describe()

"""## Межквартильные размахи"""

Q1_Surgery = df['Surgery'].quantile(0.25)
Q3_Surgery = df['Surgery'].quantile(0.75)
IQR_Surgery = Q3_Surgery - Q1_Surgery
print('Операция:', IQR_Surgery)

Q1_age = df['Age'].quantile(0.25)
Q3_age = df['Age'].quantile(0.75)
IQR_age = Q3_age - Q1_age
print('Возраст:', IQR_age)

Q1_Rectal = df['Rectal temperature'].quantile(0.25)
Q3_Rectal = df['Rectal temperature'].quantile(0.75)
IQR_Rectal = Q3_Rectal - Q1_Rectal
print('Ректальная температура:', IQR_Rectal)

Q1_Pulse = df['Pulse'].quantile(0.25)
Q3_Pulse = df['Pulse'].quantile(0.75)
IQR_Pulse = Q3_Pulse - Q1_Pulse
print('Пульс:', IQR_Pulse)

Q1_respiratory_rate = df['Respiratory rate'].quantile(0.25)
Q3_respiratory_rate = df['Respiratory rate'].quantile(0.75)
IQR_respiratory_rate = Q3_respiratory_rate - Q1_respiratory_rate
print('Частота дыхания:', IQR_respiratory_rate)

Q1_temperature_of_extremities = df['Extremities temperature'].quantile(0.25)
Q3_temperature_of_extremities = df['Extremities temperature'].quantile(0.75)
IQR_temperature_of_extremities = Q3_temperature_of_extremities - Q1_temperature_of_extremities
print('Температура конечностей:', IQR_temperature_of_extremities)

Q1_pain = df['Pain'].quantile(0.25)
Q3_pain = df['Pain'].quantile(0.75)
IQR_pain = Q3_pain - Q1_pain
print('Боль:', IQR_pain)

Q1_outcome = df['Outcome'].quantile(0.25)
Q3_outcome = df['Outcome'].quantile(0.75)
IQR_outcome = Q3_outcome - Q1_outcome
print('Результат:', IQR_outcome)

"""## Дисперсия"""

print('Операция:', df['Surgery'].var())
print('Возраст:', df['Age'].var())
print('Ректальная температура:', df['Rectal temperature'].var())
print('Пульс:', df['Pulse'].var())
print('Частота дыхания:', df['Respiratory rate'].var())
print('Температура конечностей:', df['Extremities temperature'].var())
print('Боль:', df['Pain'].var())
print('Результат:', df['Outcome'].var())

"""## Мода"""

print('Операция:', df['Surgery'].mode()[0])
print('Возраст:', df['Age'].mode()[0])
print('Ректальная температура:', df['Rectal temperature'].mode()[0])
print('Пульс:', df['Pulse'].mode()[0])
print('Частота дыхания:', df['Respiratory rate'].mode()[0])
print('Температура конечностей:', df['Extremities temperature'].mode()[0])
print('Боль:', df['Pain'].mode()[0])
print('Результат:', df['Outcome'].mode()[0])

"""## Выбросы"""

lower_bound_surgery = Q1_Surgery - (1.5 * IQR_Surgery) 
upper_bound_surgery = Q3_Surgery + (1.5 * IQR_Surgery)
remove_outliers_surgery = df[df['Surgery'].between(lower_bound_surgery,
                                                   upper_bound_surgery,
                                                   inclusive='both')]
outliers_surgery = pd.concat([df, remove_outliers_surgery]).drop_duplicates(keep=False)
outliers_surgery.head()

lower_bound_age = Q1_age - (1.5 * IQR_age) 
upper_bound_age = Q3_age + (1.5 * IQR_age)
remove_outliers_age = df[df['Age'].between(lower_bound_age,
                                           upper_bound_age,
                                           inclusive='both')]
outliers_age = pd.concat([df, remove_outliers_age]).drop_duplicates(keep=False)
outliers_age.head()

lower_bound_rectal_temperature = Q1_Rectal - (1.5 * IQR_Rectal)
upper_bound_rectal_temperature = Q3_Rectal + (1.5 * IQR_Rectal)
remove_outliers_rectal_temperature = df[df['Rectal temperature'].between(lower_bound_rectal_temperature,
                                                 upper_bound_rectal_temperature,
                                                 inclusive='both')]
outliers_rectal_temperature = pd.concat([df, remove_outliers_rectal_temperature]).drop_duplicates(keep=False)
outliers_rectal_temperature.head()

lower_bound_pulse = Q1_Pulse - (1.5 * IQR_Pulse) 
upper_bound_pulse = Q3_Pulse + (1.5 * IQR_Pulse)
remove_outliers_pulse = df[df['Pulse'].between(lower_bound_pulse, upper_bound_pulse, inclusive='both')]
outliers_pulse = pd.concat([df, remove_outliers_pulse]).drop_duplicates(keep=False)
outliers_pulse.head()

lower_bound_respiratory_rate = Q1_respiratory_rate - (1.5 * IQR_respiratory_rate) 
upper_bound_respiratory_rate = Q3_respiratory_rate + (1.5 * IQR_respiratory_rate)
remove_outliers_respiratory_rate = df[df['Respiratory rate'].between(lower_bound_respiratory_rate, upper_bound_respiratory_rate, inclusive='both')]                                   
outliers_respiratory_rate = pd.concat([df, remove_outliers_respiratory_rate]).drop_duplicates(keep=False)
outliers_respiratory_rate.head()

lower_bound_temperature_of_extremities = Q1_temperature_of_extremities - (1.5 * IQR_temperature_of_extremities) 
upper_bound_temperature_of_extremities = Q3_temperature_of_extremities + (1.5 * IQR_temperature_of_extremities)
remove_outliers_temperature_of_extremities = df[df['Extremities temperature'].between(lower_bound_temperature_of_extremities,
                                             upper_bound_temperature_of_extremities, inclusive='both')]                     
outliers_temperature_of_extremities = pd.concat([df, remove_outliers_temperature_of_extremities]).drop_duplicates(keep=False)
outliers_temperature_of_extremities.head()

lower_bound_pain = Q1_pain - (1.5 * IQR_pain) 
upper_bound_pain = Q3_pain + (1.5 * IQR_pain)
remove_outliers_pain = df[df['Pain'].between(lower_bound_pain, upper_bound_pain, inclusive='both')]
outliers_pain = pd.concat([df, remove_outliers_pain]).drop_duplicates(keep=False)
outliers_pain.head()

lower_bound_outcome = Q1_outcome - (1.5 * IQR_outcome) 
upper_bound_outcome = Q3_outcome + (1.5 * IQR_outcome)
remove_outliers_outcome = df[df['Outcome'].between(lower_bound_outcome, upper_bound_outcome, inclusive='both')]
outliers_outcome = pd.concat([df, remove_outliers_outcome]).drop_duplicates(keep=False)
outliers_outcome.head()

"""Замечаем, что пропуск Результата в той же строке, что и Операции, причем это единственные пропуски по данным столбцам. Скорее всего, заполним модами, тк признаки категориальные

# Пропуски
"""

df_filled = df.copy()
df_filled

"""Смотрим объем пропусков во всем датасете"""

(df_filled.isna().mean() * 100).round(2)

df_filled['Surgery'].fillna(df_filled['Surgery'].mode()[0], inplace=True)
print(df_filled['Surgery'].isna().sum())
print(df_filled['Surgery'].unique())
df_filled['Outcome'].fillna(df_filled['Outcome'].mode()[0], inplace=True)
print(df_filled['Outcome'].isna().sum())
print(df_filled['Outcome'].unique())
print(df_filled.loc[132])
# filled surgery and outcome with modas as intended

"""# Pain"""

df.describe()

"""### Одинаковый результат от заполнения модой и медианой. Пусть будет мода"""

fill_median = df_filled
fill_median['Pain'].fillna(df_filled['Pain'].median(), inplace=True)
print(fill_median['Pain'].describe())

fill_mode = df_filled
fill_mode['Pain'].fillna(df_filled['Pain'].mode(), inplace=True)
print(fill_mode['Pain'].describe())

print(df_filled['Pain'].fillna(df_filled['Pain'].mode()[0], inplace=True))

df.cov()

"""Переменные, оказывающие наибольшее влияние на показатели:
(пусть будут по 2 для каждого)
* rectal temp: pain - age
* pulse: pain - outcome
* respiratory rate: pain - age
* extremeties temp: pain - outcome
"""

df.describe()

df_filled.describe()

fill_median_by_groups = df_filled.copy()

fill_median_by_groups['Rectal temperature'] = fill_median_by_groups['Rectal temperature'].fillna(df_filled.groupby(['Pain', 'Age'])['Rectal temperature'].transform('median'))
fill_median_by_groups['Pulse'] = fill_median_by_groups['Pulse'].fillna(df_filled.groupby(['Pain', 'Outcome'])['Pulse'].transform('median'))
fill_median_by_groups['Extremities temperature'] = fill_median_by_groups['Extremities temperature'].fillna(df_filled.groupby(['Pain', 'Outcome'])['Extremities temperature'].transform('median'))
fill_median_by_groups['Respiratory rate'] = fill_median_by_groups['Respiratory rate'].fillna(df_filled.groupby(['Age', 'Pain'])['Respiratory rate'].transform('median'))

df_filled = fill_median_by_groups.copy()
fill_median_by_groups.describe()

"""# Сверху итог
# Снизу начальный датасет
"""

df.describe()
